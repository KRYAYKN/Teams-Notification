name: Teams Notification

description: Send Microsoft Teams notifications for pipeline results

inputs:
  teams-webhook:
    description: Microsoft Teams webhook
    required: true
  pipeline-status:
    description: Pipeline status ("success", "failure", etc.)
    required: true
  job-context:
    description: Source job (e.g., compile-app or publish-app)
    required: true
  repository:
    description: GitHub repository
    default: ${{ github.repository }}
  pull-number:
    description: Pull request number
    default: ${{ github.event.pull_request.number }}
  ref-name:
    description: GitHub branch name
    default: ${{ github.ref_name }}
  actor:
    description: Triggered by (actor)
    default: ${{ github.actor }}
  run-id:
    description: Workflow run ID
    default: ${{ github.run_id }}
  environment:
    description: Target BC environment (optional)
    required: true

runs:
  using: "composite"
  steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Get Commit Message
      shell: bash
      run: |
        git fetch --no-tags --unshallow || true
        COMMIT_MESSAGE=$(git log --no-merges -1 --pretty=format:"%s" 2>/dev/null || echo "unknown")
        echo "COMMIT_MESSAGE=$COMMIT_MESSAGE" >> $GITHUB_ENV

    - name: Send Teams Notification
      shell: bash
      run: |
        BRANCH_NAME="${GITHUB_HEAD_REF:-${GITHUB_REF##*/}}"
        COMMIT_MESSAGE="${COMMIT_MESSAGE:-unknown}"

        RUN_LINK="[View Run](https://github.com/${{ inputs.repository }}/actions/runs/${{ inputs.run-id }})"
        PR_LINK="[View PR](https://github.com/${{ inputs.repository }}/pull/${{ inputs.pull-number }})"

        if [ "${{ inputs.pipeline-status }}" = "success" ]; then
          if [ "${{ inputs.job-context }}" = "compile-app" ]; then
            title="✔️ Compilation Successful"
            summary="AL application compiled and tested successfully."
          elif [ "${{ inputs.job-context }}" = "publish-app" ]; then
            title="✔️ Publish Successful"
            summary="App successfully published to ${{ inputs.environment }}."
          else
            title="✔️ Success"
            summary="Pipeline completed successfully."
          fi
          color="Good"

        elif [ "${{ inputs.pipeline-status }}" = "failure" ]; then
          if [ "${{ inputs.job-context }}" = "compile-app" ]; then
            title="✖️ Compilation Failed"
            summary="Compilation failed during code analysis or unit tests."
          elif [ "${{ inputs.job-context }}" = "publish-app" ]; then
            title="❌ Publish Failed"
            summary="Publish failed to ${{ inputs.environment }}."
          else
            title="❌ Pipeline Failed"
            summary="Pipeline failed."
          fi
          color="Attention"

        else
          title="ℹ️ Pipeline Status"
          summary="Pipeline status: ${{ inputs.pipeline-status }}"
          color="Warning"
        fi

        payload=$(jq -n \
          --arg title "$title" \
          --arg summary "$summary" \
          --arg color "$color" \
          --arg repo "${{ inputs.repository }}" \
          --arg branch "$BRANCH_NAME" \
          --arg actor "${{ inputs.actor }}" \
          --arg commit "$COMMIT_MESSAGE" \
          --arg runLink "$RUN_LINK" \
          --arg prLink "$PR_LINK" \
          '{
            "type": "message",
            "attachments": [
              {
                "contentType": "application/vnd.microsoft.card.adaptive",
                "contentUrl": null,
                "content": {
                  "$schema": "http://adaptivecards.io/schemas/adaptive-card.json",
                  "type": "AdaptiveCard",
                  "version": "1.2",
                  "body": [
                    { "type": "TextBlock", "size": "Large", "weight": "Bolder", "color": $color, "text": $title },
                    { "type": "TextBlock", "text": $summary, "wrap": true },
                    { "type": "FactSet", "facts": [
                      { "title": "Repository:", "value": $repo },
                      { "title": "Branch:", "value": $branch },
                      { "title": "Actor:", "value": $actor },
                      { "title": "Commit:", "value": $commit }
                    ]},
                    {
                      "type": "ColumnSet",
                      "columns": [
                        {
                          "type": "Column",
                          "width": "stretch",
                          "items": [
                            { "type": "TextBlock", "text": $runLink, "wrap": true, "spacing": "Medium" }
                          ]
                        },
                        {
                          "type": "Column",
                          "width": "stretch",
                          "items": [
                            { "type": "TextBlock", "text": $prLink, "wrap": true, "spacing": "Medium" }
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          }')

        curl -H "Content-Type: application/json" -d "$payload" "${{ inputs.teams-webhook }}"
