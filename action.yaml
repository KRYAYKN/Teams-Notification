name: Teams Notification

description: Send Microsoft Teams notifications for pipeline results

inputs:
  teams-webhook:
    description: Microsoft Teams webhook
    required: true
  pipeline-status:
    description: Pipeline status ("success", "failure", etc.)
    required: true
  job-context:
    description: Source job (e.g., compile-app or publish-app)
    required: true
  repository:
    description: GitHub repository
    default: ${{ github.repository }}
  pull-number:
    description: Pull request number
    default: ${{ github.event.pull_request.number }}
  ref-name:
    description: GitHub branch name
    default: ${{ github.ref_name }}
  actor:
    description: Triggered by (actor)
    default: ${{ github.actor }}
  commit-message:
    description: Commit message
    default: ${{ github.event.head_commit.message }}
  run-id:
    description: Workflow run ID
    default: ${{ github.run_id }}
  environment:
    description: Target BC environment (optional)
    required: true

runs:
  using: "composite"
  steps:
    - name: Send Teams Notification
      shell: bash
      run: |
        BRANCH_NAME="${GITHUB_HEAD_REF:-${GITHUB_REF##*/}}"

        if [ "${{ inputs.pipeline-status }}" = "success" ]; then
          if [ "${{ inputs.job-context }}" = "compile-app" ]; then
            title="Compilation Successful"
            message="Compilation Successful !!!\n"
            message+="Application has passed code analysis and unit tests successfully.\n\n"
            message+="Repo: ${{ inputs.repository }}\n"
            message+="Branch: $BRANCH_NAME\n"
            message+="Actor: ${{ inputs.actor }}\n"
            message+="Commit: ${{ inputs.commit-message }}\n"
            message+="View Run: https://github.com/${{ inputs.repository }}/actions/runs/${{ inputs.run-id }}"
          elif [ "${{ inputs.job-context }}" = "publish-app" ]; then
            title="Published Successfully"
            message="Application was successfully published to ${{ inputs.environment }}.\n\n"
            message+="Repo: ${{ inputs.repository }}\n"
            message+="Branch: $BRANCH_NAME\n"
            message+="Actor: ${{ inputs.actor }}\n"
            message+="Commit: ${{ inputs.commit-message }}"
          else
            title="Success"
            message="Pipeline completed successfully."
          fi
          color="00FF00"

        elif [ "${{ inputs.pipeline-status }}" = "failure" ]; then
          if [ "${{ inputs.job-context }}" = "compile-app" ]; then
            title="Compilation Failed"
            message="Compilation Failed !!!\n"
            message+="Application failed during code analysis or unit tests.\n\n"
            message+="Repo: ${{ inputs.repository }}\n"
            message+="Branch: $BRANCH_NAME\n"
            message+="Actor: ${{ inputs.actor }}\n"
            message+="View PR: https://github.com/${{ inputs.repository }}/pull/${{ inputs.pull-number }}\n"
            message+="Commit: ${{ inputs.commit-message }}"
          elif [ "${{ inputs.job-context }}" = "publish-app" ]; then
            title="Publish Failed"
            message="Publish Failed !!!\n"
            message+="Application could not be published to ${{ inputs.environment }}.\n\n"
            message+="Repo: ${{ inputs.repository }}\n"
            message+="Branch: $BRANCH_NAME\n"
            message+="Actor: ${{ inputs.actor }}\n"
            message+="View PR: https://github.com/${{ inputs.repository }}/pull/${{ inputs.pull-number }}\n"
            message+="Commit: ${{ inputs.commit-message }}"
          else
            title="Failure"
            message="Pipeline failed."
          fi
          color="FF0000"

        else
          title="Status: ${{ inputs.pipeline-status }}"
          message="Job result: ${{ inputs.pipeline-status }}"
          color="CCCCCC"
        fi

        payload=$(jq -n --arg title "$title" --arg text "$message" --arg color "$color" '{
          "@type": "MessageCard",
          "@context": "https://schema.org/extensions",
          "summary": "DevOps Pipeline",
          "themeColor": $color,
          "title": $title,
          "text": $text
        }')

        curl -H "Content-Type: application/json" -d "$payload" "${{ inputs.teams-webhook }}"